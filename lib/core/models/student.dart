import 'dart:convert'; // For jsonEncode/Decode for the fee map
import 'package:uuid/uuid.dart';
import 'package:intl/intl.dart';
import 'package:json_annotation/json_annotation.dart';

part 'student.g.dart'; // For json_serializable generation

@JsonSerializable(explicitToJson: true) // Required for nested toJson/fromJson calls (like DateTime)
class Student {
  // NOTE: No Hive annotations or 'extends HiveObject' needed

  final String id; // Primary Key (UUID stored as TEXT)
  String name;

  // Use JsonKey for custom JSON conversion, which we reuse for DB string storage
  @JsonKey(fromJson: _dateTimeFromJson, toJson: _dateTimeToJson)
  DateTime? dob; // Stored as TEXT (ISO8601 string) in DB

  String parentName;
  String mobile1; // Compulsory
  String? mobile2; // Optional
  String? whatsappNumber; // Optional
  String? batchId; // Foreign key (Nullable)

  // Fee status map: Key="YYYY-MM", Value=true/false
  // Stored as JSON TEXT string in DB
  @JsonKey(fromJson: _feeStatusFromJson, toJson: _feeStatusToJson)
  Map<String, bool> monthlyFeeStatus;

  // Constructor
  Student({
    required this.name,
    this.dob,
    required this.parentName,
    required this.mobile1,
    this.mobile2,
    this.whatsappNumber,
    this.batchId,
    Map<String, bool>? initialFeeStatus, // Allows setting initial fees
    String? id, // Allow passing ID for reconstruction (e.g., fromMap)
  }) : id = id ?? const Uuid().v4(), // Generate UUID if no ID provided
        monthlyFeeStatus = initialFeeStatus ?? {}; // Initialize map if not provided


  // --- SQL Mapping ---

  // Converts this Student object into a Map suitable for sqflite database operations.
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'dob': _dateTimeToJson(dob), // Use the static converter
      'parentName': parentName,
      'mobile1': mobile1,
      'mobile2': mobile2, // Can be null
      'whatsappNumber': whatsappNumber, // Can be null
      'batchId': batchId, // Can be null
      'monthlyFeeStatus': _feeStatusToJson(monthlyFeeStatus), // Use the static converter
    };
  }

  // Factory constructor to create a Student object from a Map retrieved from sqflite.
  factory Student.fromMap(Map<String, dynamic> map) {
    // Basic validation for required fields from DB map
    if (map['id'] == null || map['name'] == null || map['parentName'] == null || map['mobile1'] == null) {
      throw const FormatException("Student.fromMap: Missing required fields ('id', 'name', 'parentName', 'mobile1') in database map.");
    }
    return Student(
      id: map['id'] as String,
      name: map['name'] as String,
      // Use static converters for safe parsing, handling potential nulls
      dob: _dateTimeFromJson(map['dob'] as String?),
      parentName: map['parentName'] as String,
      mobile1: map['mobile1'] as String,
      mobile2: map['mobile2'] as String?, // Cast as nullable string
      whatsappNumber: map['whatsappNumber'] as String?, // Cast as nullable string
      batchId: map['batchId'] as String?, // Cast as nullable string
      // Use static converter for fee status, defaulting to empty map if null/invalid
      initialFeeStatus: _feeStatusFromJson(map['monthlyFeeStatus'] as String?),
    );
  }
  // --- End SQL Mapping ---


  // --- JSON Serialization ---
  // Factory constructor for creating a Student from a JSON map (usually from backup file)
  factory Student.fromJson(Map<String, dynamic> json) => _$StudentFromJson(json); // Generated by build_runner

  // Converts this Student instance into a JSON map (for backup file)
  Map<String, dynamic> toJson() => _$StudentToJson(this); // Generated by build_runner
  // --- End JSON Serialization ---


  // --- Static Converters for JSON and Database String representation ---

  // Converts an ISO 8601 String? back to a DateTime? object.
  static DateTime? _dateTimeFromJson(String? dateString) {
    if (dateString == null) return null;
    return DateTime.tryParse(dateString); // Use tryParse for safety
  }

  // Converts a DateTime? object to an ISO 8601 String? representation.
  static String? _dateTimeToJson(DateTime? dateTime) {
    return dateTime?.toIso8601String();
  }

  // Converts a JSON String? (from DB or backup) back to a Map<String, bool>.
  static Map<String, bool> _feeStatusFromJson(String? jsonString) {
    // Handle null or empty string input
    if (jsonString == null || jsonString.isEmpty) return {};
    try {
      // Decode the JSON string
      final decoded = jsonDecode(jsonString);
      // Ensure the decoded object is a Map
      if (decoded is Map) {
        // Safely cast keys to String and values to bool
        // Defaults value to false if casting fails or is not bool
        return decoded.map((key, value) => MapEntry(key.toString(), value is bool ? value : false));
      }
      print("Warning: Decoded fee status JSON is not a Map. JSON: $jsonString");
      return {}; // Return empty map if decoded object is not a Map
    } catch (e) {
      // Log error if JSON decoding fails
      print("Error decoding monthlyFeeStatus JSON: $e, JSON: $jsonString");
      return {}; // Return empty map on error
    }
  }

  // Converts a Map<String, bool> to a JSON String representation.
  static String _feeStatusToJson(Map<String, bool> feeMap) {
    return jsonEncode(feeMap); // Simple encoding
  }
  // --- End Static Converters ---


  // --- Getters & Helper Methods ---

  // Calculates age based on Date of Birth. Returns null if DOB is not set.
  int? get age {
    if (dob == null) return null;
    final now = DateTime.now();
    int calculatedAge = now.year - dob!.year;
    // Adjust age if birthday hasn't occurred yet this year
    if (now.month < dob!.month || (now.month == dob!.month && now.day < dob!.day)) {
      calculatedAge--;
    }
    // Ensure age is not negative (e.g., if DOB set slightly in future by mistake)
    return calculatedAge < 0 ? 0 : calculatedAge;
  }

  // Returns a formatted Date of Birth string (e.g., "Sep 5, 1998") or "N/A".
  String get formattedDob {
    if (dob == null) return 'N/A';
    // Use intl package for flexible date formatting
    try {
      return DateFormat.yMMMd().format(dob!);
    } catch (e) {
      print("Error formatting DOB: $e");
      return 'Invalid Date';
    }
  }

  // Returns the "YYYY-MM" key for the current system month.
  static String getCurrentMonthKey() {
    return DateFormat('yyyy-MM').format(DateTime.now());
  }

  // Checks if the fee is marked as paid for the current system month.
  // Defaults to false if no entry exists for the current month.
  bool get isFeePaidForCurrentMonth {
    final key = Student.getCurrentMonthKey(); // Use static access
    return monthlyFeeStatus[key] ?? false;
  }

  // Method to update the fee status for the current month IN THE LOCAL OBJECT ONLY.
  // WARNING: This does NOT save the change to the database. Use DatabaseService().updateStudent().
  void setFeePaidForCurrentMonth(bool isPaid) {
    final key = Student.getCurrentMonthKey();
    // It's crucial to create a new map instance when modifying to ensure
    // state management solutions (like Riverpod) detect the change.
    final newStatus = Map<String, bool>.from(monthlyFeeStatus);
    newStatus[key] = isPaid;
    monthlyFeeStatus = newStatus; // Assign the new map back to the field
    print("Warning: setFeePaidForCurrentMonth modified local Student object state only. Database persistence requires calling DatabaseService.updateStudent().");
  }
  // --- End Getters & Helper Methods ---


  // --- CopyWith Method ---
  // Creates a new Student instance with potentially updated fields,
  // while preserving the original ID and other unchanged fields.
  Student copyWith({
    String? name,
    DateTime? dob, // Allows setting/clearing DOB
    String? parentName,
    String? mobile1,
    String? mobile2, // Allows setting/clearing optional field
    bool setMobile2Null = false, // Explicit flag to set mobile2 to null
    String? whatsappNumber, // Allows setting/clearing optional field
    bool setWhatsappNumberNull = false, // Explicit flag to set whatsappNumber to null
    String? batchId, // Allows setting/clearing batch assignment
    bool setBatchIdNull = false, // Explicit flag to set batchId to null
    Map<String, bool>? monthlyFeeStatus, // Allows replacing the entire fee map
  }) {
    // Use the main constructor, explicitly passing the ID
    return Student(
      id: id, // CRITICAL: Always preserve the original ID when copying
      name: name ?? this.name,
      // Handle DOB update separately if needed (e.g., using null)
      // For simplicity, passing dob directly works if the intent is to replace or keep
      dob: dob ?? this.dob,
      parentName: parentName ?? this.parentName,
      mobile1: mobile1 ?? this.mobile1,
      // Handle nullable fields with explicit null-setting flags
      mobile2: setMobile2Null ? null : (mobile2 ?? this.mobile2),
      whatsappNumber: setWhatsappNumberNull ? null : (whatsappNumber ?? this.whatsappNumber),
      batchId: setBatchIdNull ? null : (batchId ?? this.batchId),
      // Handle fee status map update
      initialFeeStatus: monthlyFeeStatus ?? Map.from(this.monthlyFeeStatus), // Copy map if not replaced
    );
  }
// --- End CopyWith Method ---
}